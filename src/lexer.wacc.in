#ifndef LEXER_WACC_IN
#define LEXER_WACC_IN

#include "../gen/lexer.wacc.in"
#include "../gen/token_type.wacc.in"
#include "../gen/token.wacc.in"
#include "../gen/identifier_kind.wacc.in"
#include "utils.wacc.in"
#include "string.wacc.in"


LEXER_FN(char, advance)
    bool b = call isAtEnd(self);
    if b then
        print "Unexpected EOF";
        FAIL
    ENDIF ;

    char ret = source[current];
    LEXER_SET_CURRENT(current + 1);
    return ret
end

LEXER_FN(char, peek)
    return source[current]
end

LEXER_FN(VOID, skipComment)
    while true do
        char c = call peek(self);
        bool is_at_end = call isAtEnd(self);
        if c == '\n' || is_at_end then
            RETV
        else
	    char _nop = call advance(self)
	fi
    done ;
ENDV

LEXER_FN(bool, isAtEnd)
    return current >= lenght
end

LEXER_FN(VOID, skipWhitespace)
    while true do
        // CLOX doen't need this because it's null terminated, but we arn't
        // (now)
        bool isAtEnd = call isAtEnd(self);
        if isAtEnd then
            RETV
        ENDIF ;

        char c = call peek(self);
        if c == ' ' || c == '\t' || c == '\n' || c == '\r' then
            char _nop = call advance(self)
        else if c == '#' then
            DISCARD skipComment(self)
        else
            RETV
        fi fi
    done;
ENDV

LEXER_FN(TOKEN_T, makeToken,, TOKEN_TYPE ttype)
    RETVRN(TOKEN_T, call token_ctor(ttype, start, current - start))
end

LEXER_T lexer_new(char[] source, int lenght) is
    RETVRN(LEXER_T, call lexer_ctor(source, 0, 0, lenght))
end

LEXER_FN(bool, match,, char expected)
    bool isAtEnd = call isAtEnd(self);
    if isAtEnd then
        return false
    ENDIF ;
    if source[current] != expected then
        return false
    ENDIF ;
    LEXER_SET_CURRENT(current + 1);
    return true
end

LEXER_FN(TOKEN_T, next_token)
    DISCARD skipWhitespace(self);
    
    LEXER_REFRESH;

    LEXER_SET_START(current);

    bool isAtEnd = call isAtEnd(self);
    if isAtEnd then
        RETVRN(TOKEN_T, call makeToken(self, TOKEN_EOF))
    ENDIF ;

    char c = call advance(self);
    // LEX_REFRESH??
    bool b = call isAlpha(c);
    if b then
        RETVRN(TOKEN_T, call identifier(self))
    ENDIF ;
    b = call isDigit(c);
    if b then
        RETVRN(TOKEN_T, call number(self))
    ENDIF ;

    // based on gen_trie, but massaged
    // !   !=   "   %   &&   '   (   )   *   +   ,   -   /   ;   <   <=   =   ==   >,   >=   [   ]   ||
    #define RET_IF(c__, tt__) if c == c__ then                                          \
                                            RETVRN(TOKEN_T, call makeToken(self, tt__)) \
                                          ENDIF 
    if c <= '+' then
        // !   !=   "   %   &&   '   (   )   *   +
        if c <= '&' then
            //  !   !=   "   %   &&
            if c <= '\"' then
                if c <= '!' then
                    // Starts with !
                    if c == '!' then
                        bool isEq = call match(self, '=');
                        if isEq then
                            RETVRN(TOKEN_T, call makeToken(self, TOKEN_NE))
                        else
                            RETVRN(TOKEN_T, call makeToken(self, TOKEN_NOT))
                        fi
                    ENDIF
                else
                    if c == '\"' then
                        RETVRN(TOKEN_T, call stringLit(self))
                    ENDIF
                fi
            else
                if c <= '%' then
                    RET_IF('%', TOKEN_MOD)
                else
                    if c == '&' then 
                        c = call advance(self);
                        RET_IF('&', TOKEN_AND)
                    ENDIF
                fi
            fi
        else
            // '   (   )   *   +
            if c <= '(' then
                if c <= '\'' then
                    // Starts with '
                    if c == '\'' then
                        RETVRN(TOKEN_T, call charLit(self))
                    ENDIF
                else
                    // Starts with (
                    RET_IF('(', TOKEN_LPAREN)
                fi
            else
                if c <= ')' then
                    RET_IF(')', TOKEN_RPAREN)
                else
                    if c <= '*' then
                        RET_IF('*', TOKEN_TIMES)
                    else
                        RET_IF('+', TOKEN_PLUS)
                    fi
                fi
            fi
        fi
    else
        // ,   -   /   ;   <   <=   =   ==   >,   >=   [   ]   ||
        if c <= '<' then
            // ,   -   /   ;   <   <=
            if c <= '-' then
                if c <= ',' then
                    // Starts with ,
                    RET_IF(',', TOKEN_COMMA)
                else
                    RET_IF('-', TOKEN_MINUS)
                fi
            else
                if c <= '/' then
                    RET_IF('/', TOKEN_DIV)
                else
                    if c <= ';' then
                        RET_IF(';', TOKEN_SEMI)
                    else
                        if c == '<' then
                            bool isEq = call match(self, '=');
                            if isEq then
                                RETVRN(TOKEN_T, call makeToken(self, TOKEN_LE))
                            else
                                RETVRN(TOKEN_T, call makeToken(self, TOKEN_LT))
                            fi
                        ENDIF
                    fi
                fi
            fi
        else
            // =   ==   >,   >=   [   ]   ||
            if c <= '>' then
                if c <= '=' then
                    if c == '=' then
                        bool isEq = call match(self, '=');
                        if isEq then
                            RETVRN(TOKEN_T, call makeToken(self, TOKEN_EQ))
                        else
                            RETVRN(TOKEN_T, call makeToken(self, TOKEN_ASSIGN))
                        fi
                    ENDIF 
                else
                    if c == '>' then
                        bool isEq = call match(self, '=');
                        if isEq then
                            RETVRN(TOKEN_T, call makeToken(self, TOKEN_GE))
                        else
                            RETVRN(TOKEN_T, call makeToken(self, TOKEN_GT))
                        fi
                    ENDIF
                fi
            else
                if c <= '[' then
                    RET_IF('[', TOKEN_LSQUARE)
                else
                    if c <= ']' then
                        RET_IF(']', TOKEN_RSQUARE)
                    else
                        if c <= '|' then
                            c = call advance(self);
                            RET_IF('|', TOKEN_OR)
                        ENDIF
                    fi
                fi
            fi
        fi
    fi ;
    #undef RET_IF

    println "Lexer error" ; // TODO: Maybe be better
    FAIL
end

LEXER_FN(TOKEN_T, identifier)
    bool run = true;

    while run do
        char c = call peek(self);
        bool isAlpha = call isAlpha(c);
        bool isDigit = call isDigit(c);
        if isAlpha || isDigit then
            char _nop = call advance(self)
        else
            run = false
        fi
    done;
    LEXER_REFRESH;
    TOKEN_TYPE ttype = call identifier_kind(source, start, current - start);
    RETVRN(TOKEN_T, call makeToken(self, ttype))
end

LEXER_FN(TOKEN_T, number)
    bool run = true;
    while run do
        char c = call peek(self);
        bool isDigit = call isDigit(c);
        if isDigit then
            char _nop = call advance(self)
        else
            run = false
        fi
    done ;
    RETVRN(TOKEN_T, call makeToken(self, TOKEN_NUMBER))
end

LEXER_FN(TOKEN_T, stringLit)
    bool iae = call isAtEnd(self);
    while !iae do
        char c = call advance(self);
        if c == '\"' then 
            RETVRN(TOKEN_T, call makeToken(self, TOKEN_STRING))
        ENDIF ;
        if c == '\\' then
            DISCARD escape_sequence(self)
        ENDIF ;
        if c == '\'' then
            FAIL
        ENDIF ;

        iae = call isAtEnd(self)
    done ;
    FAIL
end

LEXER_FN(TOKEN_T, charLit)
    bool b = call isAtEnd(self);
    if b then
        FAIL
    ENDIF ;
    char c = call advance(self);
    if c == '\'' || c == '\"' then
        FAIL
    ENDIF ;
    if c == '\\' then
        DISCARD escape_sequence(self)
    ENDIF ;
    c = call advance(self);
    if c != '\'' then
        FAIL
    ENDIF ;
    RETVRN(TOKEN_T, call makeToken(self, TOKEN_CHAR))
end

LEXER_FN(VOID, escape_sequence)
    XXXTODO
end

LEXER_FN(VOID, lexer_print_token,, TOKEN_T tok)
    DISCARD token_print_token(tok, source);
ENDV


TOKEN_FN(VOID, token_print_token,, char[] source)
    print start;
    print " ";
    print length;
    string kind = call token_type_str(type);
    print " ";
    print kind;
    print " ";
    DISCARD printStr(source, start, length);
    println "";
ENDV

TOKEN_FN(TOKEN_TYPE, token_type)
    return type
end


#endif
