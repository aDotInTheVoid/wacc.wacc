#ifndef GEN_IDENTIFIER_KIND_WACC_IN
#define GEN_IDENTIFIER_KIND_WACC_IN

#include "../src/utils.wacc.in"

#include <token_type.wacc.in>

TOKEN_TYPE identifier_kind(char[] str, int start, int lenn) is
    if lenn <= 3 then
        if lenn <= 2 then
            if lenn == 2 then
                if str[start + 0] == 'f' then
                    if str[start + 0] == 'd' then
                        bool eq = call streq(str, start, len, "do");
                        if eq then return TOKEN_DO ENDIF
                    else
                        bool eq = call streq(str, start, len, "fi");
                        if eq then return TOKEN_FI ENDIF
                    fi
                else
                    if str[start + 1] == 'f' then
                        bool eq = call streq(str, start, len, "if");
                        if eq then return TOKEN_IF ENDIF
                    else
                        bool eq = call streq(str, start, len, "is");
                        if eq then return TOKEN_IS ENDIF
                    fi
                fi
            ENDIF
        else
            if lenn == 3 then
                if str[start + 0] == 'f' then
                    if str[start + 0] == 'c' then
                        bool eq = call streq(str, start, len, "chr");
                        if eq then return TOKEN_CHR ENDIF
                    else
                        if str[start + 0] == 'e' then
                            bool eq = call streq(str, start, len, "end");
                            if eq then return TOKEN_END ENDIF
                        else
                            bool eq = call streq(str, start, len, "fst");
                            if eq then return TOKEN_FST ENDIF
                        fi
                    fi
                else
                    if str[start + 0] == 'l' then
                        if str[start + 0] == 'i' then
                            bool eq = call streq(str, start, len, "int");
                            if eq then return TOKEN_INT ENDIF
                        else
                            bool eq = call streq(str, start, len, "len");
                            if eq then return TOKEN_LEN ENDIF
                        fi
                    else
                        if str[start + 0] == 'o' then
                            bool eq = call streq(str, start, len, "ord");
                            if eq then return TOKEN_ORD ENDIF
                        else
                            bool eq = call streq(str, start, len, "snd");
                            if eq then return TOKEN_SND ENDIF
                        fi
                    fi
                fi
            ENDIF
        fi
    else
        if lenn <= 4 then
            if lenn == 4 then
                if str[start + 0] == 'e' then
                    if str[start + 0] == 'c' then
                        if str[start + 0] == 'b' then
                            bool eq = call streq(str, start, len, "bool");
                            if eq then return TOKEN_BOOL ENDIF
                        else
                            if str[start + 1] == 'a' then
                                bool eq = call streq(str, start, len, "call");
                                if eq then return TOKEN_CALL ENDIF
                            else
                                bool eq = call streq(str, start, len, "char");
                                if eq then return TOKEN_CHAR ENDIF
                            fi
                        fi
                    else
                        if str[start + 0] == 'd' then
                            bool eq = call streq(str, start, len, "done");
                            if eq then return TOKEN_DONE ENDIF
                        else
                            if str[start + 1] == 'l' then
                                bool eq = call streq(str, start, len, "else");
                                if eq then return TOKEN_ELSE ENDIF
                            else
                                bool eq = call streq(str, start, len, "exit");
                                if eq then return TOKEN_EXIT ENDIF
                            fi
                        fi
                    fi
                else
                    if str[start + 0] == 'p' then
                        if str[start + 0] == 'f' then
                            bool eq = call streq(str, start, len, "free");
                            if eq then return TOKEN_FREE ENDIF
                        else
                            if str[start + 0] == 'n' then
                                bool eq = call streq(str, start, len, "null");
                                if eq then return TOKEN_NULL ENDIF
                            else
                                bool eq = call streq(str, start, len, "pair");
                                if eq then return TOKEN_PAIR ENDIF
                            fi
                        fi
                    else
                        if str[start + 0] == 's' then
                            if str[start + 0] == 'r' then
                                bool eq = call streq(str, start, len, "read");
                                if eq then return TOKEN_READ ENDIF
                            else
                                bool eq = call streq(str, start, len, "skip");
                                if eq then return TOKEN_SKIP ENDIF
                            fi
                        else
                            if str[start + 1] == 'h' then
                                bool eq = call streq(str, start, len, "then");
                                if eq then return TOKEN_THEN ENDIF
                            else
                                bool eq = call streq(str, start, len, "true");
                                if eq then return TOKEN_TRUE ENDIF
                            fi
                        fi
                    fi
                fi
            ENDIF
        else
            if lenn <= 5 then
                if lenn == 5 then
                    if str[start + 0] == 'f' then
                        if str[start + 0] == 'b' then
                            bool eq = call streq(str, start, len, "begin");
                            if eq then return TOKEN_BEGIN ENDIF
                        else
                            bool eq = call streq(str, start, len, "false");
                            if eq then return TOKEN_FALSE ENDIF
                        fi
                    else
                        if str[start + 0] == 'p' then
                            bool eq = call streq(str, start, len, "print");
                            if eq then return TOKEN_PRINT ENDIF
                        else
                            bool eq = call streq(str, start, len, "while");
                            if eq then return TOKEN_WHILE ENDIF
                        fi
                    fi
                ENDIF
            else
                if lenn <= 6 then
                    if lenn == 6 then
                        if str[start + 0] == 'r' then
                            bool eq = call streq(str, start, len, "return");
                            if eq then return TOKEN_RETURN ENDIF
                        else
                            bool eq = call streq(str, start, len, "string");
                            if eq then return TOKEN_STRING ENDIF
                        fi
                    ENDIF
                else
                    if lenn == 7 then
                        if str[start + 0] == 'n' then
                            bool eq = call streq(str, start, len, "newpair");
                            if eq then return TOKEN_NEWPAIR ENDIF
                        else
                            bool eq = call streq(str, start, len, "println");
                            if eq then return TOKEN_PRINTLN ENDIF
                        fi
                    ENDIF
                fi
            fi
        fi
    fi    return TOKEN_IDENTIFIER
end

#endif
