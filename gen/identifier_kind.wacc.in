#ifndef GEN_IDENTIFIER_KIND_WACC_IN
#define GEN_IDENTIFIER_KIND_WACC_IN

#include "../src/utils.wacc.in"

#include "token_type.wacc.in"

// match str[start..start+lenn] {
//     "begin" => TOKEN_BEGIN
//     "bool" => TOKEN_BOOL
//     "call" => TOKEN_CALL
//     "char" => TOKEN_CHAR
//     "chr" => TOKEN_CHR
//     "do" => TOKEN_DO
//     "done" => TOKEN_DONE
//     "else" => TOKEN_ELSE
//     "end" => TOKEN_END
//     "exit" => TOKEN_EXIT
//     "false" => TOKEN_FALSE
//     "fi" => TOKEN_FI
//     "free" => TOKEN_FREE
//     "fst" => TOKEN_FST
//     "if" => TOKEN_IF
//     "int" => TOKEN_INT
//     "is" => TOKEN_IS
//     "len" => TOKEN_LEN
//     "newpair" => TOKEN_NEWPAIR
//     "null" => TOKEN_NULL
//     "ord" => TOKEN_ORD
//     "pair" => TOKEN_PAIR
//     "print" => TOKEN_PRINT
//     "println" => TOKEN_PRINTLN
//     "read" => TOKEN_READ
//     "return" => TOKEN_RETURN
//     "skip" => TOKEN_SKIP
//     "snd" => TOKEN_SND
//     "string" => TOKEN_STRING
//     "then" => TOKEN_THEN
//     "true" => TOKEN_TRUE
//     "while" => TOKEN_WHILE
// }
TOKEN_TYPE identifier_kind(char[] str, int start, int lenn) is 
  char[] exp=[];
  free exp; bool eq=false;
    if lenn <= 3 then
        if lenn <= 2 then
            if lenn == 2 then
                if str[start + 0] <= 'f' then
                    if str[start + 0] <= 'd' then
                        exp = ['d', 'o'];
                        eq =  call streq(str, start, lenn, exp);
                        free exp;
                        if eq then return TOKEN_DO ENDIF
                    else
                        exp = ['f', 'i'];
                        eq =  call streq(str, start, lenn, exp);
                        free exp;
                        if eq then return TOKEN_FI ENDIF
                    fi
                else
                    if str[start + 1] <= 'f' then
                        exp = ['i', 'f'];
                        eq =  call streq(str, start, lenn, exp);
                        free exp;
                        if eq then return TOKEN_IF ENDIF
                    else
                        exp = ['i', 's'];
                        eq =  call streq(str, start, lenn, exp);
                        free exp;
                        if eq then return TOKEN_IS ENDIF
                    fi
                fi
            ENDIF
        else
            if lenn == 3 then
                if str[start + 0] <= 'f' then
                    if str[start + 0] <= 'c' then
                        exp = ['c', 'h', 'r'];
                        eq =  call streq(str, start, lenn, exp);
                        free exp;
                        if eq then return TOKEN_CHR ENDIF
                    else
                        if str[start + 0] <= 'e' then
                            exp = ['e', 'n', 'd'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_END ENDIF
                        else
                            exp = ['f', 's', 't'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_FST ENDIF
                        fi
                    fi
                else
                    if str[start + 0] <= 'l' then
                        if str[start + 0] <= 'i' then
                            exp = ['i', 'n', 't'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_INT ENDIF
                        else
                            exp = ['l', 'e', 'n'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_LEN ENDIF
                        fi
                    else
                        if str[start + 0] <= 'o' then
                            exp = ['o', 'r', 'd'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_ORD ENDIF
                        else
                            exp = ['s', 'n', 'd'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_SND ENDIF
                        fi
                    fi
                fi
            ENDIF
        fi
    else
        if lenn <= 4 then
            if lenn == 4 then
                if str[start + 0] <= 'e' then
                    if str[start + 0] <= 'c' then
                        if str[start + 0] <= 'b' then
                            exp = ['b', 'o', 'o', 'l'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_BOOL ENDIF
                        else
                            if str[start + 1] <= 'a' then
                                exp = ['c', 'a', 'l', 'l'];
                                eq =  call streq(str, start, lenn, exp);
                                free exp;
                                if eq then return TOKEN_CALL ENDIF
                            else
                                exp = ['c', 'h', 'a', 'r'];
                                eq =  call streq(str, start, lenn, exp);
                                free exp;
                                if eq then return TOKEN_CHAR ENDIF
                            fi
                        fi
                    else
                        if str[start + 0] <= 'd' then
                            exp = ['d', 'o', 'n', 'e'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_DONE ENDIF
                        else
                            if str[start + 1] <= 'l' then
                                exp = ['e', 'l', 's', 'e'];
                                eq =  call streq(str, start, lenn, exp);
                                free exp;
                                if eq then return TOKEN_ELSE ENDIF
                            else
                                exp = ['e', 'x', 'i', 't'];
                                eq =  call streq(str, start, lenn, exp);
                                free exp;
                                if eq then return TOKEN_EXIT ENDIF
                            fi
                        fi
                    fi
                else
                    if str[start + 0] <= 'p' then
                        if str[start + 0] <= 'f' then
                            exp = ['f', 'r', 'e', 'e'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_FREE ENDIF
                        else
                            if str[start + 0] <= 'n' then
                                exp = ['n', 'u', 'l', 'l'];
                                eq =  call streq(str, start, lenn, exp);
                                free exp;
                                if eq then return TOKEN_NULL ENDIF
                            else
                                exp = ['p', 'a', 'i', 'r'];
                                eq =  call streq(str, start, lenn, exp);
                                free exp;
                                if eq then return TOKEN_PAIR ENDIF
                            fi
                        fi
                    else
                        if str[start + 0] <= 's' then
                            if str[start + 0] <= 'r' then
                                exp = ['r', 'e', 'a', 'd'];
                                eq =  call streq(str, start, lenn, exp);
                                free exp;
                                if eq then return TOKEN_READ ENDIF
                            else
                                exp = ['s', 'k', 'i', 'p'];
                                eq =  call streq(str, start, lenn, exp);
                                free exp;
                                if eq then return TOKEN_SKIP ENDIF
                            fi
                        else
                            if str[start + 1] <= 'h' then
                                exp = ['t', 'h', 'e', 'n'];
                                eq =  call streq(str, start, lenn, exp);
                                free exp;
                                if eq then return TOKEN_THEN ENDIF
                            else
                                exp = ['t', 'r', 'u', 'e'];
                                eq =  call streq(str, start, lenn, exp);
                                free exp;
                                if eq then return TOKEN_TRUE ENDIF
                            fi
                        fi
                    fi
                fi
            ENDIF
        else
            if lenn <= 5 then
                if lenn == 5 then
                    if str[start + 0] <= 'f' then
                        if str[start + 0] <= 'b' then
                            exp = ['b', 'e', 'g', 'i', 'n'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_BEGIN ENDIF
                        else
                            exp = ['f', 'a', 'l', 's', 'e'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_FALSE ENDIF
                        fi
                    else
                        if str[start + 0] <= 'p' then
                            exp = ['p', 'r', 'i', 'n', 't'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_PRINT ENDIF
                        else
                            exp = ['w', 'h', 'i', 'l', 'e'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_WHILE ENDIF
                        fi
                    fi
                ENDIF
            else
                if lenn <= 6 then
                    if lenn == 6 then
                        if str[start + 0] <= 'r' then
                            exp = ['r', 'e', 't', 'u', 'r', 'n'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_RETURN ENDIF
                        else
                            exp = ['s', 't', 'r', 'i', 'n', 'g'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_STRING ENDIF
                        fi
                    ENDIF
                else
                    if lenn == 7 then
                        if str[start + 0] <= 'n' then
                            exp = ['n', 'e', 'w', 'p', 'a', 'i', 'r'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_NEWPAIR ENDIF
                        else
                            exp = ['p', 'r', 'i', 'n', 't', 'l', 'n'];
                            eq =  call streq(str, start, lenn, exp);
                            free exp;
                            if eq then return TOKEN_PRINTLN ENDIF
                        fi
                    ENDIF
                fi
            fi
        fi
    fi ;
    return TOKEN_IDENTIFIER
end

#endif
