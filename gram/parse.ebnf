program = "begin", {func}, stat, "end";

func = type, ident, "(", [param-list], ")", "is", stat, "end";

param-list = param, {",", param};

param = type, ident;

stat = "skip"
    | type, ident, "=", assign-rhs
    | assign-lhs, "=", assign-rhs
    | "read", assign-lhs
    | "free", expr
    | "return", expr
    | "exit", expr
    | "print", expr
    | "println", expr
    | "if" , expr, "then", stat, "else", stat, "fi"
    | "while", expr, "do", stat, "done"
    | "begin", stat, "end"
    | stat, ";", stat
    ;

assign-lhs = ident
    | array-elem
    | pair-elem
    ;

assign-rhs = expr
    | array-liter
    | "newpair", "(", expr, ",", expr, ")"
    | pair-elem
    | "call", ident, "(", [arg-list], ")"
    ;

arg-list = expr, {",", expr};

pair-elem = "fst", expr
    | "snd", expr
    ;

type = base-type
    | array-type
    | pair-type
    ;

base-type = "int"
    | "bool"
    | "char"
    | "string"
    ;

array-type = type, "[", "]";

pair-type = "pair", "(", pair-elem-type, pair-elem-type, ")";

pair-elem-type = base-type
    | array-type
    | "pair"
    ;

expr = int-liter
    | bool-liter
    | char-liter
    | string-liter
    | pair-liter
    | indent
    | array-elem
    | unary-oper, expr
    | expr, binary-oper, expr (* TODO: Precedence *)
    | "(", expr, ")"
    ;

unary-open = "!" 
    | "-" 
    | "len" 
    | "ord" 
    | "chr"
    ;

binary-oper = "*" | "/" | "%" | "+" | "-" | ">" | ">=" | "<" | "<=" | "==" | "!=" | "&&" | "||";

(*TODO: Ident is lexical *)

array-elem = ident, "[", expr, "]", {"[", expr, "]"};

(*TODO*: Int liter/bool liter/ char liter are lexical*)

array-liter = "[", [ expr, {",", expr}, ], "]"
    ;

pair-liter = "null";